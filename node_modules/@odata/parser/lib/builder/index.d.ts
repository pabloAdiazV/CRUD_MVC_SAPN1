/// <reference types="node" />
import { Edm } from '@odata/metadata';
import { ODataFilter } from './filter';
export * from './batch';
export * from './filter';
export * from './param';
export * from './types';
export declare function param(): import("./param").ODataQueryParam;
export declare function filter(obj?: Record<string, any>): ODataFilter<any>;
/**
 * edm primitive literal value creators
 */
export declare const literalValues: {
    Binary: (value: Buffer | string) => Edm.PrimitiveTypeValue;
    Boolean: (value: Boolean) => Edm.PrimitiveTypeValue;
    Byte: (value: number) => Edm.PrimitiveTypeValue;
    Date: (value: Date | string) => Edm.PrimitiveTypeValue;
    DateTimeOffset: (value: Date | String) => Edm.PrimitiveTypeValue;
    Decimal: (value: number) => Edm.PrimitiveTypeValue;
    Double: (value: number) => Edm.PrimitiveTypeValue;
    Duration: (value: string) => Edm.PrimitiveTypeValue;
    Guid: (value: string) => Edm.PrimitiveTypeValue;
    Int16: (value: number) => Edm.PrimitiveTypeValue;
    Int32: (value: number) => Edm.PrimitiveTypeValue;
    Int64: (value: number) => Edm.PrimitiveTypeValue;
    SByte: (value: number) => Edm.PrimitiveTypeValue;
    Single: (value: number) => Edm.PrimitiveTypeValue;
    Stream: (value: any) => Edm.PrimitiveTypeValue;
    String: (value: string) => Edm.PrimitiveTypeValue;
    TimeOfDay: (value: any) => Edm.PrimitiveTypeValue;
    Geography: (value: any) => Edm.PrimitiveTypeValue;
    GeographyPoint: (value: any) => Edm.PrimitiveTypeValue;
    GeographyLineString: (value: any) => Edm.PrimitiveTypeValue;
    GeographyPolygon: (value: any) => Edm.PrimitiveTypeValue;
    GeographyMultiPoint: (value: any) => Edm.PrimitiveTypeValue;
    GeographyMultiLineString: (value: any) => Edm.PrimitiveTypeValue;
    GeographyMultiPolygon: (value: any) => Edm.PrimitiveTypeValue;
    GeographyCollection: (value: any) => Edm.PrimitiveTypeValue;
    Geometry: (value: any) => Edm.PrimitiveTypeValue;
    GeometryPoint: (value: any) => Edm.PrimitiveTypeValue;
    GeometryLineString: (value: any) => Edm.PrimitiveTypeValue;
    GeometryPolygon: (value: any) => Edm.PrimitiveTypeValue;
    GeometryMultiPoint: (value: any) => Edm.PrimitiveTypeValue;
    GeometryMultiLineString: (value: any) => Edm.PrimitiveTypeValue;
    GeometryMultiPolygon: (value: any) => Edm.PrimitiveTypeValue;
    GeometryCollection: (value: any) => Edm.PrimitiveTypeValue;
};
