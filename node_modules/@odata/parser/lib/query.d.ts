import * as Lexer from './lexer';
import { SourceArray } from './utils';
export declare function queryOptions(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function queryOption(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function systemQueryOption(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function customQueryOption(value: SourceArray, index: number): Lexer.Token;
export declare function id(value: SourceArray, index: number): Lexer.Token;
export declare function expand(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function expandItem(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function expandCountOption(value: SourceArray, index: number): Lexer.Token;
export declare function expandRefOption(value: SourceArray, index: number): Lexer.Token;
export declare function expandOption(value: SourceArray, index: number): Lexer.Token;
export declare function expandPath(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function search(value: SourceArray, index: number): Lexer.Token;
export declare function searchExpr(value: SourceArray, index: number): Lexer.Token;
export declare function searchTerm(value: SourceArray, index: number): Lexer.Token;
export declare function searchNotExpr(value: SourceArray, index: number): Lexer.Token;
export declare function searchOrExpr(value: SourceArray, index: number): Lexer.Token;
export declare function searchAndExpr(value: SourceArray, index: number): Lexer.Token;
export declare function searchPhrase(value: SourceArray, index: number): Lexer.Token;
export declare function searchWord(value: SourceArray, index: number): Lexer.Token;
export declare function searchParenExpr(value: SourceArray, index: number): Lexer.Token;
export declare function levels(value: SourceArray, index: number): Lexer.Token;
export declare function filter(value: SourceArray, index: number): Lexer.Token;
export declare function orderby(value: SourceArray, index: number): Lexer.Token;
export declare function orderbyItem(value: SourceArray, index: number): Lexer.Token;
export declare function skip(value: SourceArray, index: number): Lexer.Token;
export declare function top(value: SourceArray, index: number): Lexer.Token;
export declare function format(value: SourceArray, index: number): Lexer.Token;
export declare function inlinecount(value: SourceArray, index: number): Lexer.Token;
export declare function select(value: SourceArray, index: number): Lexer.Token;
export declare function selectItem(value: SourceArray, index: number): Lexer.Token;
export declare function allOperationsInSchema(value: SourceArray, index: number): number;
export declare function selectProperty(value: SourceArray, index: number): Lexer.Token;
export declare function selectPath(value: SourceArray, index: number): Lexer.Token;
export declare function qualifiedActionName(value: SourceArray, index: number): Lexer.Token;
export declare function qualifiedFunctionName(value: SourceArray, index: number): Lexer.Token;
export declare function skiptoken(value: SourceArray, index: number): Lexer.Token;
export declare function aliasAndValue(value: SourceArray, index: number): Lexer.Token;
