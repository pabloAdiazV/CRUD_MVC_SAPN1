import * as Lexer from './lexer';
import { SourceArray } from './utils';
export declare function enumeration(value: SourceArray, index: number): Lexer.Token;
export declare function enumValue(value: SourceArray, index: number): Lexer.Token;
export declare function singleEnumValue(value: SourceArray, index: number): Lexer.Token;
export declare function enumMemberValue(value: SourceArray, index: number): Lexer.Token;
export declare function singleQualifiedTypeName(value: SourceArray, index: number): Lexer.Token;
export declare function qualifiedTypeName(value: SourceArray, index: number): Lexer.Token;
export declare function qualifiedEntityTypeName(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function qualifiedComplexTypeName(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function qualifiedTypeDefinitionName(value: SourceArray, index: number): Lexer.Token;
export declare function qualifiedEnumTypeName(value: SourceArray, index: number): Lexer.Token;
export declare function namespace(value: SourceArray, index: number): number;
export declare function odataIdentifier(value: SourceArray, index: number, tokenType?: Lexer.TokenType): Lexer.Token;
export declare function namespacePart(value: SourceArray, index: number): Lexer.Token;
export declare function entitySetName(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function singletonEntity(value: SourceArray, index: number): Lexer.Token;
export declare function entityTypeName(value: SourceArray, index: number, schema?: any): Lexer.Token;
export declare function complexTypeName(value: SourceArray, index: number, schema?: any): Lexer.Token;
export declare function typeDefinitionName(value: SourceArray, index: number): Lexer.Token;
export declare function enumerationTypeName(value: SourceArray, index: number): Lexer.Token;
export declare function enumerationMember(value: SourceArray, index: number): Lexer.Token;
export declare function termName(value: SourceArray, index: number): Lexer.Token;
export declare function primitiveTypeName(value: SourceArray, index: number): Lexer.Token;
export declare function isPrimitiveTypeName(type: string, metadataContext?: any): boolean;
export declare function getMetadataRoot(metadataContext: any): any;
export declare function primitiveProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveKeyProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveNonKeyProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveColProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function complexProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function complexColProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function streamProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function navigationProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function entityNavigationProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function entityColNavigationProperty(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function action(value: SourceArray, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function actionImport(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function odataFunction(value: SourceArray, index: number): Lexer.Token;
export declare function getOperationType(operation: string, metadataContext: any, token: Lexer.Token, isBoundCollection: boolean, isCollection: boolean, isPrimitive: boolean, types?: string): any;
export declare function entityFunction(value: SourceArray, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function entityColFunction(value: SourceArray, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function complexFunction(value: SourceArray, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function complexColFunction(value: SourceArray, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function primitiveFunction(value: SourceArray, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function primitiveColFunction(value: SourceArray, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function getOperationImportType(operation: string, metadataContext: any, token: Lexer.Token, isCollection?: boolean, isPrimitive?: boolean, types?: string): any;
export declare function entityFunctionImport(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function entityColFunctionImport(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function complexFunctionImport(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function complexColFunctionImport(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveFunctionImport(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveColFunctionImport(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
