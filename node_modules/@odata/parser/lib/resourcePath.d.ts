import * as Lexer from './lexer';
import { SourceArray } from './utils';
export declare function resourcePath(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function batch(value: SourceArray, index: number): Lexer.Token;
export declare function entity(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function metadata(value: SourceArray, index: number): Lexer.Token;
export declare function collectionNavigation(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function collectionNavigationPath(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function singleNavigation(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function propertyPath(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function collectionPath(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function singlePath(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function complexPath(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function boundOperation(value: SourceArray, index: number, isCollection: boolean, metadataContext?: any): Lexer.Token;
export declare function boundActionCall(value: SourceArray, index: number, isCollection: boolean, metadataContext?: any): Lexer.Token;
export declare function boundFunctionCall(value: SourceArray, index: number, odataFunction: Function, tokenType: Lexer.TokenType, isCollection: boolean, metadataContext?: any): Lexer.Token;
export declare function boundEntityFuncCall(value: SourceArray, index: number, isCollection: boolean, metadataContext?: any): Lexer.Token;
export declare function boundEntityColFuncCall(value: SourceArray, index: number, isCollection: boolean, metadataContext?: any): Lexer.Token;
export declare function boundComplexFuncCall(value: SourceArray, index: number, isCollection: boolean, metadataContext?: any): Lexer.Token;
export declare function boundComplexColFuncCall(value: SourceArray, index: number, isCollection: boolean, metadataContext?: any): Lexer.Token;
export declare function boundPrimitiveFuncCall(value: SourceArray, index: number, isCollection: boolean, metadataContext?: any): Lexer.Token;
export declare function boundPrimitiveColFuncCall(value: SourceArray, index: number, isCollection: boolean, metadataContext?: any): Lexer.Token;
export declare function actionImportCall(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function functionImportCall(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function functionParameters(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function functionParameter(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function crossjoin(value: SourceArray, index: number, metadataContext?: any): Lexer.Token;
export declare function all(value: SourceArray, index: number): Lexer.Token;
