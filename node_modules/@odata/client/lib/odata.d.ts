import { BatchRequest } from "./batch";
import { EntitySet } from "./entityset";
import { ODataFilter } from "./filter";
import { SystemQueryOptions } from "./params";
import { Transformation } from "./tranformation";
import { BatchRequestOptions, BatchRequests, BatchResponses, Credential, ODataActionImportRequest, ODataActionRequest, ODataFunctionImportRequest, ODataFunctionRequest, ODataNewOptions, ODataQueryRequest, ODataReadIDRequest, ODataVersion, ODataWriteRequest, PlainODataMultiResponse, PlainODataResponse, PlainODataSingleResponse } from "./types";
import { ODataV4NewOptions } from "./types";
import { ODataV4 } from "./types_v4";
/**
 * OData Client
 */
export declare class OData {
    /**
     * odata service path, like /sap/c4c/odata/v1/c4codata/
     */
    private serviceEndpoint;
    /**
     * http basic credential
     */
    private credential;
    /**
     * oauth client for client credential flow
     */
    private oauthClient;
    /**
     * internal csrf token
     */
    private csrfToken;
    /**
     * dont direct use this object
     *
     * use client.getHeaders()
     *
     */
    private commonHeader;
    private fetchProxy;
    private processCsrfToken;
    private csrfTokenName;
    private variant;
    private version;
    private lock;
    /**
     * OData client builder
     *
     * @param options config options
     */
    static New(options: ODataV4NewOptions): ODataV4;
    static New(options: ODataNewOptions): OData;
    /**
     * create odata client instance for odata v4
     *
     * @param options
     */
    static New4(options: ODataNewOptions): ODataV4;
    /**
     * new odata query options
     *
     * @deprecated
     */
    static newParam<T = any>(): SystemQueryOptions;
    /**
     * new odata query options
     */
    static newOptions<T = any>(): SystemQueryOptions<T>;
    /**
     * new filter
     */
    static newFilter<T = any>(): ODataFilter;
    /**
     * new transformation
     *
     * @returns
     */
    static newTransformation(): Transformation;
    /**
     * OData
     *
     * @deprecated please use static method `OData.New` to create instance
     * @private
     */
    private constructor();
    /**
     * generate dynamic header
     */
    private getHeaders;
    /**
     * getEntitySet
     *
     * @param entitySetName the name of entity set, you can get it from metadata
     *
     */
    getEntitySet<T = any>(entitySetName: string): EntitySet<T>;
    /**
     * Set OData Client Http Basic credential
     *
     * @param credential
     */
    setCredential(credential: Credential): void;
    /**
     * setODataEndPath
     *
     * e.g. https://tenant.c4c.saphybriscloud.cn/sap/c4c/odata/v1/c4codata/
     */
    setODataEndPath(odataEndpoint: string): void;
    getVersion(): ODataVersion;
    /**
     * fetch CSRF Token
     *
     * @param withCache set to `false` if you want to force to retrieve the refresh csrf token
     * @returns
     */
    getCsrfToken(withCache?: boolean): Promise<string>;
    cleanCsrfToken(): void;
    /**
     * odata request uri
     *
     * @param uri HTTP URI
     * @param systemOptions odata query params
     * @param method HTTP method
     * @param body request content
     */
    private requestUri;
    /**
     * odata request
     *
     * @param collection CollectionName
     * @param id entity uuid or compound key
     * @param systemOptions query param, not work for single entity uri
     * @param method request method
     * @param entity odata Entity instance
     */
    private _executeDataOperation;
    actionImport(actionName: string, parameters?: any, params?: SystemQueryOptions): Promise<PlainODataResponse>;
    functionImport(functionName: string, parameters?: any, params?: SystemQueryOptions): Promise<PlainODataResponse>;
    /**
     * convert the odata key predicate object/value to string
     *
     * @param key
     *
     * @example
     *
     * ```ts
     * this.formatIdString(1) // => String('(1)')
     * this.formatIdString({UUID:'xxx'}) // => String('(UUID='xxx')')
     * ```
     */
    private formatIdString;
    /**
     * new odata http request
     */
    newRequest<T = any>(options: ODataQueryRequest): Promise<PlainODataMultiResponse<T>>;
    newRequest<T = any>(options: ODataWriteRequest<T>): Promise<PlainODataSingleResponse<T>>;
    newRequest<T = any>(options: ODataReadIDRequest): Promise<PlainODataSingleResponse<T>>;
    newRequest(options: ODataFunctionRequest): Promise<PlainODataResponse>;
    newRequest(options: ODataActionRequest): Promise<PlainODataResponse>;
    newRequest(options: ODataFunctionImportRequest): Promise<PlainODataResponse>;
    newRequest(options: ODataActionImportRequest): Promise<PlainODataResponse>;
    private _executeActionOrFunction;
    /**
     * format batch request parameter
     */
    private formatBatchRequests;
    /**
     * execute batch requests and get response
     *
     * @param requests batch request
     */
    execBatchRequests(requests: BatchRequests): BatchResponses<BatchRequests>;
    /**
     * execute batch requests in OData `V4.01` Json format, and get response
     *
     * this feature is experimental, use it on your own risk.
     *
     * @experimental
     * @param requests
     */
    execBatchRequestsJson<T extends BatchRequests = any>(requests: T): BatchResponses<T>;
    /**
     * create new filter
     *
     * @alias OData.newFilter
     */
    newFilter<T = any>(): ODataFilter<any>;
    /**
     * create new system query options
     *
     * @deprecated
     * @alias OData.newParam
     */
    newParam<T = any>(): SystemQueryOptions<any>;
    /**
     * create new system query options
     *
     * @returns
     */
    newOptions<T = any>(): SystemQueryOptions<T>;
    newTransformation(): Transformation;
    newBatchRequest<T>(options: BatchRequestOptions<T>): Promise<BatchRequest<T>>;
}
