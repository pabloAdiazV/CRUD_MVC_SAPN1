"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _SystemQueryOptions_customParams;
Object.defineProperty(exports, "__esModule", { value: true });
exports.systemOptions = exports.param = exports.ODataQueryParam = exports.ODataParam = exports.SystemQueryOptions = void 0;
const concat_1 = __importDefault(require("@newdash/newdash/concat"));
const isArray_1 = __importDefault(require("@newdash/newdash/isArray"));
const join_1 = __importDefault(require("@newdash/newdash/join"));
const uniq_1 = __importDefault(require("@newdash/newdash/uniq"));
const tranformation_1 = require("./tranformation");
const errors_1 = require("./errors");
const filter_1 = require("./filter");
const util_1 = require("./util");
/**
 * OData System Query Options
 *
 * like `$filter`, `$format`, `$top` ....
 *
 */
class SystemQueryOptions {
    /**
     * @deprecated
     * @returns
     */
    static newParam() {
        return new SystemQueryOptions();
    }
    static newOptions() {
        return new SystemQueryOptions();
    }
    constructor() {
        this.$select = [];
        this.$expand = [];
        this.$count = false;
        _SystemQueryOptions_customParams.set(this, void 0);
        __classPrivateFieldSet(this, _SystemQueryOptions_customParams, new util_1.SearchParams(), "f");
    }
    /**
     * with $inlinecount value
     *
     * @version 2.0.0
     */
    inlinecount(inlinecount = false) {
        if (inlinecount) {
            this.$inlinecount = "allpages";
        }
        else {
            delete this.$inlinecount;
        }
        return this;
    }
    /**
     *
     * count items in odata v4
     *
     * @param count
     *
     * @version 4.0.0
     */
    count(count = true) {
        this.$count = count;
        return this;
    }
    filter(filter) {
        if (filter === undefined) {
            return new filter_1.ParamBoundedFilter(this);
        }
        if (filter instanceof filter_1.ODataFilter) {
            this.$filter = filter.build();
            return this;
        }
        else if (typeof filter === "string") {
            this.$filter = filter;
            return this;
        }
        throw new errors_1.ValidationError("ODataQueryParam.filter only accept string or ODataFilter type parameter");
    }
    /**
     * skip first records
     *
     * @param skip
     */
    skip(skip) {
        this.$skip = skip;
        return this;
    }
    /**
     * limit result max records
     *
     * @param top
     */
    top(top) {
        this.$top = top;
        return this;
    }
    /**
     * select viewed fields
     *
     * @param selects
     */
    select(selects) {
        this.$select = (0, concat_1.default)(this.$select, selects);
        return this;
    }
    /**
     * set order sequence
     *
     * @param fieldOrOrders
     * @param order default desc, disabled when first params is array
     */
    orderby(fieldOrOrders, order = "desc") {
        if ((0, isArray_1.default)(fieldOrOrders)) {
            return this.orderbyMulti(fieldOrOrders);
        }
        this.$orderby = `${String(fieldOrOrders)} ${order}`;
        return this;
    }
    /**
     * set order by multi field
     *
     * @param fields
     */
    orderbyMulti(fields = []) {
        this.$orderby = (0, join_1.default)(fields.map((f) => `${String(f.field)} ${f.order || "desc"}`), ",");
        return this;
    }
    /**
     * result format, please keep it as json
     *
     * @param format deafult json
     */
    format(format) {
        if (format === "json") {
            this.$format = format;
        }
        else {
            throw new errors_1.ValidationError("light-odata doesnt support xml response");
        }
        return this;
    }
    /**
     * full text search
     *
     * default with fuzzy search, SAP system or OData V4 only
     *
     * @param value
     * @version 4.0.0
     */
    search(value, fuzzy = true) {
        this.$search = fuzzy ? `%${value}%` : value;
        return this;
    }
    apply(expression) {
        if ((0, isArray_1.default)(expression)) {
            this.$apply = expression
                .map(exp => exp instanceof tranformation_1.Transformation ? exp.toString() : String(exp))
                .join("/"); // Transformation Sequences
        }
        else {
            if (expression instanceof tranformation_1.Transformation) {
                this.$apply = expression.toString();
            }
            else {
                // fallback, support complex customize scenario
                this.$apply = expression;
            }
        }
        return this;
    }
    /**
     * expand navigation props
     *
     * @param fields
     * @param replace
     */
    expand(fields, replace = false) {
        if (replace) {
            if (typeof fields == "string") {
                this.$expand = [fields];
            }
            else if ((0, isArray_1.default)(fields)) {
                // @ts-ignore
                this.$expand = fields;
            }
        }
        else {
            this.$expand = (0, concat_1.default)(this.$expand, fields);
        }
        return this;
    }
    /**
     * add addtional custom properties in final url query
     *
     * @param key addtional url query parameter key
     * @param value value
     * @returns
     *
     * @example
     *
     * ```ts
     * OData.newParam().
     * ```
     */
    custom(key, value) {
        __classPrivateFieldGet(this, _SystemQueryOptions_customParams, "f").append(key, value);
        return this;
    }
    /**
     * convert param object to query string
     *
     * @param version
     * @param variant
     * @returns
     */
    toString(version = "v2", variant = "default") {
        const params = new util_1.SearchParams();
        params.putAll(__classPrivateFieldGet(this, _SystemQueryOptions_customParams, "f"));
        if (this.$format) {
            params.append("$format", this.$format);
        }
        if (this.$filter) {
            params.append("$filter", this.$filter.toString());
        }
        if (this.$orderby) {
            params.append("$orderby", this.$orderby);
        }
        if (this.$select && this.$select.length > 0) {
            params.append("$select", (0, join_1.default)((0, uniq_1.default)(this.$select), ","));
        }
        if (this.$skip) {
            params.append("$skip", this.$skip.toString());
        }
        if (this.$top && this.$top > 0) {
            params.append("$top", this.$top.toString());
        }
        if (this.$expand && this.$expand.length > 0) {
            params.append("$expand", this.$expand.join(","));
        }
        switch (version) {
            case "v2":
                if (this.$inlinecount) {
                    params.append("$inlinecount", this.$inlinecount);
                }
                break;
            case "v4":
                if (this.$count) {
                    params.append("$count", "true");
                }
                if (this.$apply) {
                    params.append("$apply", this.$apply);
                }
                break;
            default:
                break;
        }
        if (this.$search) {
            switch (variant) {
                case "sap-gateway":
                    params.append("search", this.$search);
                    break;
                default:
                    params.append("$search", this.$search);
                    break;
            }
        }
        return params.toString();
    }
}
exports.SystemQueryOptions = SystemQueryOptions;
_SystemQueryOptions_customParams = new WeakMap();
exports.ODataParam = SystemQueryOptions;
/**
 * odata system query options
 */
exports.ODataQueryParam = SystemQueryOptions;
/**
 *
 * @deprecated
 * @returns
 */
function param() {
    return exports.ODataParam.newParam();
}
exports.param = param;
/**
 * create new system options
 *
 * @returns
 */
function systemOptions() {
    return SystemQueryOptions.newOptions();
}
exports.systemOptions = systemOptions;
