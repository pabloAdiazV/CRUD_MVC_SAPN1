"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdmV2 = exports.EdmString = exports.Guid = exports.ODataDateTimeOffset = exports.ODataDateTime = exports.ODataDateBase = exports.RawValue = exports.RawString = exports.ODataValueJSONReplacer = exports.ODataValueObject = exports.SAPNetweaverOData = void 0;
const util_1 = require("./util");
exports.SAPNetweaverOData = ["c4c", "byd", "sap-gateway"];
/**
 * Edm value
 */
class ODataValueObject {
    constructor(rawValue) {
        this.rawValue = rawValue;
    }
    /**
     * to OData Json format value string
     *
     * @returns
     */
    toJSONString() {
        return this.toString();
    }
}
exports.ODataValueObject = ODataValueObject;
const ODataValueJSONReplacer = (key, value) => {
    if (value instanceof ODataValueObject) {
        return value.toJSONString();
    }
    return value;
};
exports.ODataValueJSONReplacer = ODataValueJSONReplacer;
/**
 * RawString
 */
class RawString extends ODataValueObject {
    static from(str) {
        return new RawString(str);
    }
    toString() {
        return this.rawValue;
    }
}
exports.RawString = RawString;
exports.RawValue = RawString;
class ODataDateBase extends ODataValueObject {
    constructor(date, uriEncoded = true) {
        if (date instanceof Date) {
            super(date);
        }
        else {
            super(new Date(date));
        }
        this._uriEncoded = uriEncoded;
    }
    toJSONString() {
        return (0, util_1.FormatODataDateTimedate)(this.rawValue);
    }
}
exports.ODataDateBase = ODataDateBase;
/**
 * Edm.DateTime
 */
class ODataDateTime extends ODataDateBase {
    /**
     *
     * @param date date object
     * @param uriEncoded encode date string with `encodeURIComponent`, default is `true`
     * @returns
     */
    static from(date, uriEncoded) {
        return new ODataDateTime(date, uriEncoded);
    }
    toString() {
        let inner = this.rawValue.toISOString().substring(0, 19);
        if (this._uriEncoded) {
            inner = encodeURIComponent(inner);
        }
        return `datetime'${inner}'`;
    }
}
exports.ODataDateTime = ODataDateTime;
/**
 * Edm.DateTimeOffset
 */
class ODataDateTimeOffset extends ODataDateBase {
    /**
     *
     * @param date date object
     * @param uriEncoded encode date string with `encodeURIComponent`, use it if you requires
     * @returns
     */
    static from(date, uriEncoded) {
        return new ODataDateTimeOffset(date, uriEncoded);
    }
    toString() {
        let inner = this.rawValue.toISOString();
        if (this._uriEncoded) {
            inner = encodeURIComponent(inner);
        }
        return `datetimeoffset'${inner}'`;
    }
}
exports.ODataDateTimeOffset = ODataDateTimeOffset;
class Guid extends exports.RawValue {
}
exports.Guid = Guid;
class EdmString extends ODataValueObject {
    static from(str) {
        return new EdmString(str);
    }
    toString() {
        return `'${this.rawValue}'`;
    }
    toJSONString() {
        return this.rawValue;
    }
}
exports.EdmString = EdmString;
exports.EdmV2 = {
    DateTime: ODataDateTime,
    DateTimeOffset: ODataDateTimeOffset,
    RawString,
    Guid,
    String: EdmString,
};
