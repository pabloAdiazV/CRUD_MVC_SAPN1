import { ODataFilter } from "./filter";
import { SystemQueryOptions } from "./params";
import { OData } from "./odata";
import type { DeepPartial, ODataKeyPredicate } from "./types";
/**
 * EntitySet
 */
export declare class EntitySet<T = any> {
    private _entitySet;
    private _client;
    constructor(collection: string, client: OData);
    private _checkError;
    private _getResultSingle;
    private _getResults;
    newFilter(): ODataFilter<T>;
    /**
     * @deprecated
     * @returns
     */
    newParam(): SystemQueryOptions<T>;
    newOptions(): SystemQueryOptions<any>;
    retrieve(id: ODataKeyPredicate, systemOptions?: SystemQueryOptions): Promise<T>;
    find(base: DeepPartial<T>): Promise<T[]>;
    query(filter: ODataFilter): Promise<T[]>;
    query(systemOptions: SystemQueryOptions): Promise<T[]>;
    query(): Promise<T[]>;
    count(filter?: ODataFilter): Promise<number>;
    count(filter?: Partial<T>): Promise<number>;
    create(body: DeepPartial<T>): Promise<T>;
    create(body: any): Promise<T>;
    /**
     * update instance by `UPDATE` method
     *
     * @param id
     * @param body
     */
    update(id: ODataKeyPredicate, body: DeepPartial<T>): Promise<void>;
    /**
     * delete instance by object keys
     *
     * @param id
     */
    delete(id: ODataKeyPredicate): Promise<void>;
    /**
     * perform bounded action
     *
     * @param actionName the action name, remember add namespace for it
     * @param parameters
     */
    action(actionName: string, id: ODataKeyPredicate, parameters?: any): any;
    /**
     * perform bounded function
     *
     * @param functionName
     * @param id
     */
    function(functionName: string, id: ODataKeyPredicate, parameters?: any, systemOptions?: SystemQueryOptions): any;
}
