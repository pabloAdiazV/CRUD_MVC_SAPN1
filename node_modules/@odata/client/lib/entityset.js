"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitySet = void 0;
// @ts-nocheck
const errors_1 = require("./errors");
const filter_1 = require("./filter");
const params_1 = require("./params");
const odata_1 = require("./odata");
/**
 * EntitySet
 */
class EntitySet {
    constructor(collection, client) {
        this._entitySet = collection;
        this._client = client;
    }
    _checkError(res) {
        var _a, _b, _c;
        if (res.error) {
            switch (this._client.getVersion()) {
                case "v2":
                    throw new errors_1.ODataServerError((_b = (_a = res.error) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.value);
                case "v4":
                    throw new errors_1.ODataServerError((_c = res.error) === null || _c === void 0 ? void 0 : _c.message);
                default:
                    break;
            }
        }
    }
    _getResultSingle(res) {
        switch (this._client.getVersion()) {
            case "v2":
                // @ts-ignore
                return res.d;
            case "v4":
                // @ts-ignore
                return res;
            default:
                break;
        }
    }
    _getResults(res) {
        var _a;
        switch (this._client.getVersion()) {
            case "v2":
                // @ts-ignore
                return (_a = res.d) === null || _a === void 0 ? void 0 : _a.results;
            case "v4":
                // @ts-ignore
                return res === null || res === void 0 ? void 0 : res.value;
            default:
                break;
        }
    }
    newFilter() {
        return this._client.newFilter();
    }
    /**
     * @deprecated
     * @returns
     */
    newParam() {
        return this._client.newParam();
    }
    newOptions() {
        return this._client.newOptions();
    }
    async retrieve(id, systemOptions) {
        const res = await this._client.newRequest({
            collection: this._entitySet,
            method: "GET",
            id,
            params: systemOptions
        });
        this._checkError(res);
        return this._getResultSingle(res);
    }
    async find(base) {
        const filter = odata_1.OData.newFilter();
        Object.entries(base).forEach(([key, value]) => {
            if (typeof value == "string") {
                filter.field(key).eqString(value);
            }
            else {
                filter.field(key).eq(value);
            }
        });
        return this.query(odata_1.OData.newParam().filter(filter));
    }
    async query(param) {
        if (param instanceof filter_1.ODataFilter) {
            param = (0, params_1.systemOptions)().filter(param);
        }
        if (param == undefined) {
            param = odata_1.OData.newParam();
        }
        const res = await this._client.newRequest({
            collection: this._entitySet,
            method: "GET",
            params: param
        });
        this._checkError(res);
        return this._getResults(res);
    }
    async count(filter) {
        var _a;
        const params = odata_1.OData.newParam().top(1);
        // set count flag
        switch (this._client.getVersion()) {
            case "v4":
                params.count(true);
                break;
            case "v2":
                params.inlinecount(true);
                break;
        }
        if (typeof filter === "object") {
            if (filter instanceof filter_1.ODataFilter) {
                params.filter(filter);
            }
            else {
                const newFilter = this.newFilter();
                for (const [key, value] of Object.entries(filter)) {
                    newFilter.field(key).eq(value);
                }
                params.filter(newFilter);
            }
        }
        const res = await this._client.newRequest({
            collection: this._entitySet,
            method: "GET",
            params
        });
        this._checkError(res);
        switch (this._client.getVersion()) {
            case "v2":
                return parseInt((_a = res === null || res === void 0 ? void 0 : res.d) === null || _a === void 0 ? void 0 : _a.__count);
            case "v4":
                return res["@odata.count"];
        }
    }
    async create(body) {
        const res = await this._client.newRequest({
            collection: this._entitySet,
            method: "POST",
            entity: body
        });
        this._checkError(res);
        return this._getResultSingle(res);
    }
    /**
     * update instance by `UPDATE` method
     *
     * @param id
     * @param body
     */
    async update(id, body) {
        const res = await this._client.newRequest({
            collection: this._entitySet,
            method: "PATCH",
            id,
            entity: body
        });
        this._checkError(res);
    }
    /**
     * delete instance by object keys
     *
     * @param id
     */
    async delete(id) {
        const res = await this._client.newRequest({
            collection: this._entitySet,
            method: "DELETE",
            id
        });
        this._checkError(res);
    }
    /**
     * perform bounded action
     *
     * @param actionName the action name, remember add namespace for it
     * @param parameters
     */
    async action(actionName, id, parameters) {
        const responseBody = await this._client.newRequest({
            collection: this._entitySet,
            method: "POST",
            id,
            parameters,
            actionName
        });
        this._checkError(responseBody);
        return responseBody;
    }
    /**
     * perform bounded function
     *
     * @param functionName
     * @param id
     */
    async function(functionName, id, parameters, systemOptions) {
        const responseBody = await this._client.newRequest({
            collection: this._entitySet,
            method: "GET",
            id,
            params: systemOptions,
            parameters,
            functionName
        });
        this._checkError(responseBody);
        return responseBody;
    }
}
exports.EntitySet = EntitySet;
