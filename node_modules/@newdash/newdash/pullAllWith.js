"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pullAllWith = void 0;
const basePullAll_1 = __importDefault(require("./.internal/basePullAll"));
/**
 * This method is like `pullAll` except that it accepts `comparator` which
 * is invoked to compare elements of `array` to `values`. The comparator is
 * invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `differenceWith`, this method mutates `array`.
 *
 * @since 5.11.0
 * @category Array
 * @param array The array to modify.
 * @param values The values to remove.
 * @param comparator The comparator invoked per element.
 * @returns Returns `array`.
 * @see [[pull]], [[pullAll]], [[pullAllBy]], [[pullAt]], [[remove]], [[reject]]
 * @example
 *
 * ```js
 * const array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }]
 *
 * pullAllWith(array, [{ 'x': 3, 'y': 4 }], isEqual)
 * console.log(array)
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
 * ```
 */
function pullAllWith(array, values, comparator) {
    return (array != null && array.length && values != null && values.length)
        ? (0, basePullAll_1.default)(array, values, undefined, comparator)
        : array;
}
exports.pullAllWith = pullAllWith;
exports.default = pullAllWith;
