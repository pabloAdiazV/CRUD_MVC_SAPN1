"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isError = void 0;
const getTag_1 = __importDefault(require("./.internal/getTag"));
const isObjectLike_1 = __importDefault(require("./isObjectLike"));
const isPlainObject_1 = __importDefault(require("./isPlainObject"));
/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @since 5.6.0
 * @category Lang
 * @param value The value to check.
 * @returns Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * ```js
 * isError(new Error)
 * // => true
 *
 * isError(Error)
 * // => false
 * ```
 */
function isError(value) {
    if (!(0, isObjectLike_1.default)(value)) {
        return false;
    }
    if (Error && value instanceof Error) {
        return true;
    }
    if (DOMException && value instanceof DOMException) {
        return true;
    }
    const tag = (0, getTag_1.default)(value);
    return tag == "[object Error]" || tag == "[object DOMException]" ||
        (typeof value.message === "string" && typeof value.name === "string" && !(0, isPlainObject_1.default)(value));
}
exports.isError = isError;
exports.default = isError;
