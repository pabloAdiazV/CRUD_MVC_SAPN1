"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isArrayLike_1 = __importDefault(require("./isArrayLike"));
const isObjectLike_1 = __importDefault(require("./isObjectLike"));
/**
 * This method is like `isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @since 5.5.0
 * @category Lang
 * @param value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * ```js
 * isArrayLikeObject([1, 2, 3])
 * // => true
 *
 * isArrayLikeObject(document.body.children)
 * // => true
 *
 * isArrayLikeObject('abc')
 * // => false
 *
 * isArrayLikeObject(Function)
 * // => false
 * ```
 */
function isArrayLikeObject(value) {
    return (0, isObjectLike_1.default)(value) && (0, isArrayLike_1.default)(value);
}
exports.default = isArrayLikeObject;
