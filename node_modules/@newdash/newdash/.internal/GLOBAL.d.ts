/** Used to associate wrap methods with their bit flags. */
export const wrapFlags: (string | number)[][];
export const argsTag: "[object Arguments]";
export const arrayTag: "[object Array]";
export const asyncTag: "[object AsyncFunction]";
export const boolTag: "[object Boolean]";
export const dateTag: "[object Date]";
export const domExcTag: "[object DOMException]";
export const errorTag: "[object Error]";
export const funcTag: "[object Function]";
export const genTag: "[object GeneratorFunction]";
export const mapTag: "[object Map]";
export const numberTag: "[object Number]";
export const nullTag: "[object Null]";
export const objectTag: "[object Object]";
export const promiseTag: "[object Promise]";
export const proxyTag: "[object Proxy]";
export const regexpTag: "[object RegExp]";
export const setTag: "[object Set]";
export const stringTag: "[object String]";
export const symbolTag: "[object Symbol]";
export const undefinedTag: "[object Undefined]";
export const weakMapTag: "[object WeakMap]";
export const weakSetTag: "[object WeakSet]";
export const arrayBufferTag: "[object ArrayBuffer]";
export const dataViewTag: "[object DataView]";
export const float32Tag: "[object Float32Array]";
export const float64Tag: "[object Float64Array]";
export const int8Tag: "[object Int8Array]";
export const int16Tag: "[object Int16Array]";
export const int32Tag: "[object Int32Array]";
export const uint8Tag: "[object Uint8Array]";
export const uint8ClampedTag: "[object Uint8ClampedArray]";
export const uint16Tag: "[object Uint16Array]";
export const uint32Tag: "[object Uint32Array]";
export const reEmptyStringLeading: RegExp;
export const reEmptyStringMiddle: RegExp;
export const reEmptyStringTrailing: RegExp;
export const reEscapedHtml: RegExp;
export const reUnescapedHtml: RegExp;
export const reHasEscapedHtml: RegExp;
export const reHasUnescapedHtml: RegExp;
export const reEscape: RegExp;
export const reEvaluate: RegExp;
export const reInterpolate: RegExp;
export const reIsDeepProp: RegExp;
export const reIsPlainProp: RegExp;
export const rePropName: RegExp;
export const reRegExpChar: RegExp;
export const reHasRegExpChar: RegExp;
export const reTrim: RegExp;
export const reTrimStart: RegExp;
export const reTrimEnd: RegExp;
export const reWrapComment: RegExp;
export const reWrapDetails: RegExp;
export const reSplitDetails: RegExp;
/** Used to match words composed of alphanumeric characters. */
export const reAsciiWord: RegExp;
/** Used to match backslashes in property paths. */
export const reEscapeChar: RegExp;
/**
 * Used to match
 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
 */
export const reEsTemplate: RegExp;
/** Used to match `RegExp` flags from their coerced string values. */
export const reFlags: RegExp;
/** Used to detect bad signed hexadecimal string values. */
export const reIsBadHex: RegExp;
/** Used to detect binary string values. */
export const reIsBinary: RegExp;
/** Used to detect host constructors (Safari). */
export const reIsHostCtor: RegExp;
/** Used to detect octal string values. */
export const reIsOctal: RegExp;
/** Used to detect unsigned integer values. */
export const reIsUint: RegExp;
/** Used to match Latin Unicode letters (excluding mathematical operators). */
export const reLatin: RegExp;
/** Used to ensure capturing order of template delimiters. */
export const reNoMatch: RegExp;
/** Used to match unescaped characters in compiled string literals. */
export const reUnescapedString: RegExp;
export const rsAstralRange: "\\ud800-\\udfff";
export const rsComboMarksRange: "\\u0300-\\u036f";
export const reComboHalfMarksRange: "\\ufe20-\\ufe2f";
export const rsComboSymbolsRange: "\\u20d0-\\u20ff";
export const rsComboRange: string;
export const rsDingbatRange: "\\u2700-\\u27bf";
export const rsLowerRange: "a-z\\xdf-\\xf6\\xf8-\\xff";
export const rsMathOpRange: "\\xac\\xb1\\xd7\\xf7";
export const rsNonCharRange: "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
export const rsPunctuationRange: "\\u2000-\\u206f";
export const rsSpaceRange: " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
export const rsUpperRange: "A-Z\\xc0-\\xd6\\xd8-\\xde";
export const rsVarRange: "\\ufe0e\\ufe0f";
export const rsBreakRange: string;
export const rsApos: "['’]";
export const rsAstral: string;
export const rsBreak: string;
export const rsCombo: string;
export const rsDigits: "\\d+";
export const rsDingbat: string;
export const rsLower: string;
export const rsMisc: string;
export const rsFitz: "\\ud83c[\\udffb-\\udfff]";
export const rsModifier: string;
export const rsNonAstral: string;
export const rsRegional: "(?:\\ud83c[\\udde6-\\uddff]){2}";
export const rsSurrPair: "[\\ud800-\\udbff][\\udc00-\\udfff]";
export const rsUpper: string;
export const rsZWJ: "\\u200d";
export const rsMiscLower: string;
export const rsMiscUpper: string;
export const rsOptContrLower: string;
export const rsOptContrUpper: string;
export const reOptMod: string;
export const rsOptVar: string;
export const rsOptJoin: string;
export const rsOrdLower: "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
export const rsOrdUpper: "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
export const rsSeq: string;
export const rsEmoji: string;
export const rsSymbol: string;
/** Used to match apostrophes. */
export const reApos: RegExp;
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
export const reComboMark: RegExp;
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
export const reUnicode: RegExp;
/** Used to match complex or compound words. */
export const reUnicodeWord: RegExp;
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
export const reHasUnicode: RegExp;
/** Used to detect strings that need a more robust regexp to match words. */
export const reHasUnicodeWord: RegExp;
/** Used to assign default `context` object properties. */
export const contextProps: string[];
/** Used to make template sourceURLs easier to identify. */
export const templateCounter: -1;
/** Used to identify `toStringTag` values of typed arrays. */
export const typedArrayTags: typeof typedArrayTags;
/** Used to identify `toStringTag` values supported by `clone`. */
export const cloneableTags: typeof cloneableTags;
export namespace deburredLetters {
    const À: string;
    const Á: string;
    const Â: string;
    const Ã: string;
    const Ä: string;
    const Å: string;
    const à: string;
    const á: string;
    const â: string;
    const ã: string;
    const ä: string;
    const å: string;
    const Ç: string;
    const ç: string;
    const Ð: string;
    const ð: string;
    const È: string;
    const É: string;
    const Ê: string;
    const Ë: string;
    const è: string;
    const é: string;
    const ê: string;
    const ë: string;
    const Ì: string;
    const Í: string;
    const Î: string;
    const Ï: string;
    const ì: string;
    const í: string;
    const î: string;
    const ï: string;
    const Ñ: string;
    const ñ: string;
    const Ò: string;
    const Ó: string;
    const Ô: string;
    const Õ: string;
    const Ö: string;
    const Ø: string;
    const ò: string;
    const ó: string;
    const ô: string;
    const õ: string;
    const ö: string;
    const ø: string;
    const Ù: string;
    const Ú: string;
    const Û: string;
    const Ü: string;
    const ù: string;
    const ú: string;
    const û: string;
    const ü: string;
    const Ý: string;
    const ý: string;
    const ÿ: string;
    const Æ: string;
    const æ: string;
    const Þ: string;
    const þ: string;
    const ß: string;
    const Ā: string;
    const Ă: string;
    const Ą: string;
    const ā: string;
    const ă: string;
    const ą: string;
    const Ć: string;
    const Ĉ: string;
    const Ċ: string;
    const Č: string;
    const ć: string;
    const ĉ: string;
    const ċ: string;
    const č: string;
    const Ď: string;
    const Đ: string;
    const ď: string;
    const đ: string;
    const Ē: string;
    const Ĕ: string;
    const Ė: string;
    const Ę: string;
    const Ě: string;
    const ē: string;
    const ĕ: string;
    const ė: string;
    const ę: string;
    const ě: string;
    const Ĝ: string;
    const Ğ: string;
    const Ġ: string;
    const Ģ: string;
    const ĝ: string;
    const ğ: string;
    const ġ: string;
    const ģ: string;
    const Ĥ: string;
    const Ħ: string;
    const ĥ: string;
    const ħ: string;
    const Ĩ: string;
    const Ī: string;
    const Ĭ: string;
    const Į: string;
    const İ: string;
    const ĩ: string;
    const ī: string;
    const ĭ: string;
    const į: string;
    const ı: string;
    const Ĵ: string;
    const ĵ: string;
    const Ķ: string;
    const ķ: string;
    const ĸ: string;
    const Ĺ: string;
    const Ļ: string;
    const Ľ: string;
    const Ŀ: string;
    const Ł: string;
    const ĺ: string;
    const ļ: string;
    const ľ: string;
    const ŀ: string;
    const ł: string;
    const Ń: string;
    const Ņ: string;
    const Ň: string;
    const Ŋ: string;
    const ń: string;
    const ņ: string;
    const ň: string;
    const ŋ: string;
    const Ō: string;
    const Ŏ: string;
    const Ő: string;
    const ō: string;
    const ŏ: string;
    const ő: string;
    const Ŕ: string;
    const Ŗ: string;
    const Ř: string;
    const ŕ: string;
    const ŗ: string;
    const ř: string;
    const Ś: string;
    const Ŝ: string;
    const Ş: string;
    const Š: string;
    const ś: string;
    const ŝ: string;
    const ş: string;
    const š: string;
    const Ţ: string;
    const Ť: string;
    const Ŧ: string;
    const ţ: string;
    const ť: string;
    const ŧ: string;
    const Ũ: string;
    const Ū: string;
    const Ŭ: string;
    const Ů: string;
    const Ű: string;
    const Ų: string;
    const ũ: string;
    const ū: string;
    const ŭ: string;
    const ů: string;
    const ű: string;
    const ų: string;
    const Ŵ: string;
    const ŵ: string;
    const Ŷ: string;
    const ŷ: string;
    const Ÿ: string;
    const Ź: string;
    const Ż: string;
    const Ž: string;
    const ź: string;
    const ż: string;
    const ž: string;
    const Ĳ: string;
    const ĳ: string;
    const Œ: string;
    const œ: string;
    const ŉ: string;
    const ſ: string;
}
/** Used to map characters to HTML entities. */
export const htmlEscapes: {
    '&': string;
    '<': string;
    '>': string;
    '"': string;
    "'": string;
};
/** Used to map HTML entities to characters. */
export const htmlUnescapes: {
    '&amp;': string;
    '&lt;': string;
    '&gt;': string;
    '&quot;': string;
    '&#39;': string;
};
/** Used to escape characters for inclusion in compiled string literals. */
export const stringEscapes: {
    '\\': string;
    "'": string;
    '\n': string;
    '\r': string;
    '\u2028': string;
    '\u2029': string;
};
export const freeParseFloat: typeof parseFloat;
export const freeParseInt: typeof parseInt;
/** Detect free variable `global` from Node. */
export const freeGlobal: typeof globalThis;
/** Detect free variable `self`. */
export const freeSelf: Window & typeof globalThis;
/** Used as a reference to the global object. */
export const root: any;
/** Detect free variable `exports`. */
export const freeExports: any;
/** Detect free variable `module`. */
export const freeModule: NodeModule;
/** Detect the popular CommonJS extension `module.exports`. */
export const moduleExports: boolean;
/** Detect free variable `process` from Node. */
export const freeProcess: NodeJS.Process;
/** Used to access faster Node helpers. */
export const nodeUtil: any;
export const nodeIsArrayBuffer: any;
export const nodeIsDate: any;
export const nodeIsMap: any;
export const nodeIsRegExp: any;
export const nodeIsSet: any;
export const nodeIsTypedArray: any;
export const arrayProto: any[];
export const funcProto: Function;
export const objectProto: Object;
/** Used to resolve the decompiled source of functions. */
export const funcToString: () => string;
/** Used to check objects for own properties. */
export const hasOwnProperty: (v: PropertyKey) => boolean;
/** Used to generate unique IDs. */
export const idCounter: 0;
/** Used to detect methods masquerading as native. */
export const maskSrcKey: "";
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
export const nativeObjectToString: () => string;
/** Used to infer the `Object` constructor. */
export const objectCtorString: any;
export const allocUnsafe: any;
export const getPrototype: Function;
export const objectCreate: {
    (o: object): any;
    (o: object, properties: PropertyDescriptorMap & ThisType<any>): any;
};
export const propertyIsEnumerable: (v: PropertyKey) => boolean;
export const splice: {
    (start: number, deleteCount?: number): any[];
    (start: number, deleteCount: number, ...items: any[]): any[];
};
export const spreadableSymbol: symbol;
export const symIterator: symbol;
export const symToStringTag: symbol;
export const defineProperty: <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T;
/** Mocked built-ins. */
export const ctxClearTimeout: typeof clearTimeout;
export const ctxNow: () => number;
export const ctxSetTimeout: typeof setTimeout;
export const nativeCeil: (x: number) => number;
export const nativeFloor: (x: number) => number;
export const nativeGetSymbols: (o: any) => symbol[];
export const nativeIsBuffer: any;
export const nativeIsFinite: typeof isFinite;
export const nativeJoin: (separator?: string) => string;
export const nativeKeys: Function;
export const nativeMax: (...values: number[]) => number;
export const nativeMin: (...values: number[]) => number;
export const nativeNow: () => number;
export const nativeParseInt: typeof parseInt;
export const nativeRandom: () => number;
export const nativeReverse: () => any[];
export const nativeCreate: {
    (o: object): any;
    (o: object, properties: PropertyDescriptorMap & ThisType<any>): any;
};
/** Used to store function metadata. */
export const metaMap: WeakMap<object, any>;
/** Used to lookup unminified function names. */
export const realNames: {};
export const dataViewCtorString: string;
export const mapCtorString: string;
export const promiseCtorString: string;
export const setCtorString: string;
export const weakMapCtorString: string;
export const symbolProto: Symbol;
export const symbolValueOf: () => symbol;
export const symbolToString: () => string;
