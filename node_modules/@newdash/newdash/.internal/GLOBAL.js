"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reTrim = exports.reHasRegExpChar = exports.reRegExpChar = exports.rePropName = exports.reIsPlainProp = exports.reIsDeepProp = exports.reInterpolate = exports.reEvaluate = exports.reEscape = exports.reHasUnescapedHtml = exports.reHasEscapedHtml = exports.reUnescapedHtml = exports.reEscapedHtml = exports.reEmptyStringTrailing = exports.reEmptyStringMiddle = exports.reEmptyStringLeading = exports.uint32Tag = exports.uint16Tag = exports.uint8ClampedTag = exports.uint8Tag = exports.int32Tag = exports.int16Tag = exports.int8Tag = exports.float64Tag = exports.float32Tag = exports.dataViewTag = exports.arrayBufferTag = exports.weakSetTag = exports.weakMapTag = exports.undefinedTag = exports.symbolTag = exports.stringTag = exports.setTag = exports.regexpTag = exports.proxyTag = exports.promiseTag = exports.objectTag = exports.nullTag = exports.numberTag = exports.mapTag = exports.genTag = exports.funcTag = exports.errorTag = exports.domExcTag = exports.dateTag = exports.boolTag = exports.asyncTag = exports.arrayTag = exports.argsTag = exports.wrapFlags = void 0;
exports.rsOptContrUpper = exports.rsOptContrLower = exports.rsMiscUpper = exports.rsMiscLower = exports.rsZWJ = exports.rsUpper = exports.rsSurrPair = exports.rsRegional = exports.rsNonAstral = exports.rsModifier = exports.rsFitz = exports.rsMisc = exports.rsLower = exports.rsDingbat = exports.rsDigits = exports.rsCombo = exports.rsBreak = exports.rsAstral = exports.rsApos = exports.rsBreakRange = exports.rsVarRange = exports.rsUpperRange = exports.rsSpaceRange = exports.rsPunctuationRange = exports.rsNonCharRange = exports.rsMathOpRange = exports.rsLowerRange = exports.rsDingbatRange = exports.rsComboRange = exports.rsComboSymbolsRange = exports.reComboHalfMarksRange = exports.rsComboMarksRange = exports.rsAstralRange = exports.reUnescapedString = exports.reNoMatch = exports.reLatin = exports.reIsUint = exports.reIsOctal = exports.reIsHostCtor = exports.reIsBinary = exports.reIsBadHex = exports.reFlags = exports.reEsTemplate = exports.reEscapeChar = exports.reAsciiWord = exports.reSplitDetails = exports.reWrapDetails = exports.reWrapComment = exports.reTrimEnd = exports.reTrimStart = void 0;
exports.objectCreate = exports.getPrototype = exports.allocUnsafe = exports.objectCtorString = exports.nativeObjectToString = exports.maskSrcKey = exports.idCounter = exports.hasOwnProperty = exports.funcToString = exports.objectProto = exports.funcProto = exports.arrayProto = exports.nodeIsTypedArray = exports.nodeIsSet = exports.nodeIsRegExp = exports.nodeIsMap = exports.nodeIsDate = exports.nodeIsArrayBuffer = exports.nodeUtil = exports.freeProcess = exports.moduleExports = exports.freeModule = exports.freeExports = exports.root = exports.freeSelf = exports.freeGlobal = exports.freeParseInt = exports.freeParseFloat = exports.stringEscapes = exports.htmlUnescapes = exports.htmlEscapes = exports.deburredLetters = exports.cloneableTags = exports.typedArrayTags = exports.templateCounter = exports.contextProps = exports.reHasUnicodeWord = exports.reHasUnicode = exports.reUnicodeWord = exports.reUnicode = exports.reComboMark = exports.reApos = exports.rsSymbol = exports.rsEmoji = exports.rsSeq = exports.rsOrdUpper = exports.rsOrdLower = exports.rsOptJoin = exports.rsOptVar = exports.reOptMod = void 0;
exports.symbolToString = exports.symbolValueOf = exports.symbolProto = exports.weakMapCtorString = exports.setCtorString = exports.promiseCtorString = exports.mapCtorString = exports.dataViewCtorString = exports.realNames = exports.metaMap = exports.nativeCreate = exports.nativeReverse = exports.nativeRandom = exports.nativeParseInt = exports.nativeNow = exports.nativeMin = exports.nativeMax = exports.nativeKeys = exports.nativeJoin = exports.nativeIsFinite = exports.nativeIsBuffer = exports.nativeGetSymbols = exports.nativeFloor = exports.nativeCeil = exports.ctxSetTimeout = exports.ctxNow = exports.ctxClearTimeout = exports.defineProperty = exports.symToStringTag = exports.symIterator = exports.spreadableSymbol = exports.splice = exports.propertyIsEnumerable = void 0;
const CONSTANTS_1 = require("./CONSTANTS");
const toSource_1 = __importDefault(require("./toSource"));
const overArg_1 = __importDefault(require("./overArg"));
/** Used to associate wrap methods with their bit flags. */
exports.wrapFlags = [
    ['ary', CONSTANTS_1.WRAP_ARY_FLAG],
    ['bind', CONSTANTS_1.WRAP_BIND_FLAG],
    ['bindKey', CONSTANTS_1.WRAP_BIND_KEY_FLAG],
    ['curry', CONSTANTS_1.WRAP_CURRY_FLAG],
    ['curryRight', CONSTANTS_1.WRAP_CURRY_RIGHT_FLAG],
    ['flip', CONSTANTS_1.WRAP_FLIP_FLAG],
    ['partial', CONSTANTS_1.WRAP_PARTIAL_FLAG],
    ['partialRight', CONSTANTS_1.WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', CONSTANTS_1.WRAP_REARG_FLAG]
];
/** `Object#toString` result references. */
exports.argsTag = '[object Arguments]', exports.arrayTag = '[object Array]', exports.asyncTag = '[object AsyncFunction]', exports.boolTag = '[object Boolean]', exports.dateTag = '[object Date]', exports.domExcTag = '[object DOMException]', exports.errorTag = '[object Error]', exports.funcTag = '[object Function]', exports.genTag = '[object GeneratorFunction]', exports.mapTag = '[object Map]', exports.numberTag = '[object Number]', exports.nullTag = '[object Null]', exports.objectTag = '[object Object]', exports.promiseTag = '[object Promise]', exports.proxyTag = '[object Proxy]', exports.regexpTag = '[object RegExp]', exports.setTag = '[object Set]', exports.stringTag = '[object String]', exports.symbolTag = '[object Symbol]', exports.undefinedTag = '[object Undefined]', exports.weakMapTag = '[object WeakMap]', exports.weakSetTag = '[object WeakSet]';
exports.arrayBufferTag = '[object ArrayBuffer]', exports.dataViewTag = '[object DataView]', exports.float32Tag = '[object Float32Array]', exports.float64Tag = '[object Float64Array]', exports.int8Tag = '[object Int8Array]', exports.int16Tag = '[object Int16Array]', exports.int32Tag = '[object Int32Array]', exports.uint8Tag = '[object Uint8Array]', exports.uint8ClampedTag = '[object Uint8ClampedArray]', exports.uint16Tag = '[object Uint16Array]', exports.uint32Tag = '[object Uint32Array]';
/** Used to match empty string literals in compiled template source. */
exports.reEmptyStringLeading = /\b__p \+= '';/g, exports.reEmptyStringMiddle = /\b(__p \+=) '' \+/g, exports.reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
/** Used to match HTML entities and HTML characters. */
exports.reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, exports.reUnescapedHtml = /[&<>"']/g, exports.reHasEscapedHtml = RegExp(exports.reEscapedHtml.source), exports.reHasUnescapedHtml = RegExp(exports.reUnescapedHtml.source);
/** Used to match template delimiters. */
exports.reEscape = /<%-([\s\S]+?)%>/g, exports.reEvaluate = /<%([\s\S]+?)%>/g, exports.reInterpolate = /<%=([\s\S]+?)%>/g;
/** Used to match property names within property paths. */
exports.reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, exports.reIsPlainProp = /^\w*$/, exports.rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
exports.reRegExpChar = /[\\^$.*+?()[\]{}|]/g, exports.reHasRegExpChar = RegExp(exports.reRegExpChar.source);
/** Used to match leading and trailing whitespace. */
exports.reTrim = /^\s+|\s+$/g, exports.reTrimStart = /^\s+/, exports.reTrimEnd = /\s+$/;
/** Used to match wrap detail comments. */
exports.reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, exports.reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, exports.reSplitDetails = /,? & /;
/** Used to match words composed of alphanumeric characters. */
exports.reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
/** Used to match backslashes in property paths. */
exports.reEscapeChar = /\\(\\)?/g;
/**
 * Used to match
 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
 */
exports.reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
/** Used to match `RegExp` flags from their coerced string values. */
exports.reFlags = /\w*$/;
/** Used to detect bad signed hexadecimal string values. */
exports.reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */
exports.reIsBinary = /^0b[01]+$/i;
/** Used to detect host constructors (Safari). */
exports.reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used to detect octal string values. */
exports.reIsOctal = /^0o[0-7]+$/i;
/** Used to detect unsigned integer values. */
exports.reIsUint = /^(?:0|[1-9]\d*)$/;
/** Used to match Latin Unicode letters (excluding mathematical operators). */
exports.reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
/** Used to ensure capturing order of template delimiters. */
exports.reNoMatch = /($^)/;
/** Used to match unescaped characters in compiled string literals. */
exports.reUnescapedString = /['\n\r\u2028\u2029\\]/g;
/** Used to compose unicode character classes. */
exports.rsAstralRange = '\\ud800-\\udfff', exports.rsComboMarksRange = '\\u0300-\\u036f', exports.reComboHalfMarksRange = '\\ufe20-\\ufe2f', exports.rsComboSymbolsRange = '\\u20d0-\\u20ff', exports.rsComboRange = exports.rsComboMarksRange + exports.reComboHalfMarksRange + exports.rsComboSymbolsRange, exports.rsDingbatRange = '\\u2700-\\u27bf', exports.rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', exports.rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', exports.rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', exports.rsPunctuationRange = '\\u2000-\\u206f', exports.rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', exports.rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', exports.rsVarRange = '\\ufe0e\\ufe0f', exports.rsBreakRange = exports.rsMathOpRange + exports.rsNonCharRange + exports.rsPunctuationRange + exports.rsSpaceRange;
/** Used to compose unicode capture groups. */
exports.rsApos = "['\u2019]", exports.rsAstral = '[' + exports.rsAstralRange + ']', exports.rsBreak = '[' + exports.rsBreakRange + ']', exports.rsCombo = '[' + exports.rsComboRange + ']', exports.rsDigits = '\\d+', exports.rsDingbat = '[' + exports.rsDingbatRange + ']', exports.rsLower = '[' + exports.rsLowerRange + ']', exports.rsMisc = '[^' + exports.rsAstralRange + exports.rsBreakRange + exports.rsDigits + exports.rsDingbatRange + exports.rsLowerRange + exports.rsUpperRange + ']', exports.rsFitz = '\\ud83c[\\udffb-\\udfff]', exports.rsModifier = '(?:' + exports.rsCombo + '|' + exports.rsFitz + ')', exports.rsNonAstral = '[^' + exports.rsAstralRange + ']', exports.rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', exports.rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', exports.rsUpper = '[' + exports.rsUpperRange + ']', exports.rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */
exports.rsMiscLower = '(?:' + exports.rsLower + '|' + exports.rsMisc + ')', exports.rsMiscUpper = '(?:' + exports.rsUpper + '|' + exports.rsMisc + ')', exports.rsOptContrLower = '(?:' + exports.rsApos + '(?:d|ll|m|re|s|t|ve))?', exports.rsOptContrUpper = '(?:' + exports.rsApos + '(?:D|LL|M|RE|S|T|VE))?', exports.reOptMod = exports.rsModifier + '?', exports.rsOptVar = '[' + exports.rsVarRange + ']?', exports.rsOptJoin = '(?:' + exports.rsZWJ + '(?:' + [exports.rsNonAstral, exports.rsRegional, exports.rsSurrPair].join('|') + ')' + exports.rsOptVar + exports.reOptMod + ')*', exports.rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])', exports.rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])', exports.rsSeq = exports.rsOptVar + exports.reOptMod + exports.rsOptJoin, exports.rsEmoji = '(?:' + [exports.rsDingbat, exports.rsRegional, exports.rsSurrPair].join('|') + ')' + exports.rsSeq, exports.rsSymbol = '(?:' + [exports.rsNonAstral + exports.rsCombo + '?', exports.rsCombo, exports.rsRegional, exports.rsSurrPair, exports.rsAstral].join('|') + ')';
/** Used to match apostrophes. */
exports.reApos = RegExp(exports.rsApos, 'g');
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
exports.reComboMark = RegExp(exports.rsCombo, 'g');
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
exports.reUnicode = RegExp(exports.rsFitz + '(?=' + exports.rsFitz + ')|' + exports.rsSymbol + exports.rsSeq, 'g');
/** Used to match complex or compound words. */
exports.reUnicodeWord = RegExp([
    exports.rsUpper + '?' + exports.rsLower + '+' + exports.rsOptContrLower + '(?=' + [exports.rsBreak, exports.rsUpper, '$'].join('|') + ')',
    exports.rsMiscUpper + '+' + exports.rsOptContrUpper + '(?=' + [exports.rsBreak, exports.rsUpper + exports.rsMiscLower, '$'].join('|') + ')',
    exports.rsUpper + '?' + exports.rsMiscLower + '+' + exports.rsOptContrLower,
    exports.rsUpper + '+' + exports.rsOptContrUpper,
    exports.rsOrdUpper,
    exports.rsOrdLower,
    exports.rsDigits,
    exports.rsEmoji
].join('|'), 'g');
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
exports.reHasUnicode = RegExp('[' + exports.rsZWJ + exports.rsAstralRange + exports.rsComboRange + exports.rsVarRange + ']');
/** Used to detect strings that need a more robust regexp to match words. */
exports.reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/** Used to assign default `context` object properties. */
exports.contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
];
/** Used to make template sourceURLs easier to identify. */
exports.templateCounter = -1;
/** Used to identify `toStringTag` values of typed arrays. */
exports.typedArrayTags = {};
exports.typedArrayTags[exports.float32Tag] = exports.typedArrayTags[exports.float64Tag] =
    exports.typedArrayTags[exports.int8Tag] = exports.typedArrayTags[exports.int16Tag] =
        exports.typedArrayTags[exports.int32Tag] = exports.typedArrayTags[exports.uint8Tag] =
            exports.typedArrayTags[exports.uint8ClampedTag] = exports.typedArrayTags[exports.uint16Tag] =
                exports.typedArrayTags[exports.uint32Tag] = true;
exports.typedArrayTags[exports.argsTag] = exports.typedArrayTags[exports.arrayTag] =
    exports.typedArrayTags[exports.arrayBufferTag] = exports.typedArrayTags[exports.boolTag] =
        exports.typedArrayTags[exports.dataViewTag] = exports.typedArrayTags[exports.dateTag] =
            exports.typedArrayTags[exports.errorTag] = exports.typedArrayTags[exports.funcTag] =
                exports.typedArrayTags[exports.mapTag] = exports.typedArrayTags[exports.numberTag] =
                    exports.typedArrayTags[exports.objectTag] = exports.typedArrayTags[exports.regexpTag] =
                        exports.typedArrayTags[exports.setTag] = exports.typedArrayTags[exports.stringTag] =
                            exports.typedArrayTags[exports.weakMapTag] = false;
/** Used to identify `toStringTag` values supported by `clone`. */
exports.cloneableTags = {};
exports.cloneableTags[exports.argsTag] = exports.cloneableTags[exports.arrayTag] =
    exports.cloneableTags[exports.arrayBufferTag] = exports.cloneableTags[exports.dataViewTag] =
        exports.cloneableTags[exports.boolTag] = exports.cloneableTags[exports.dateTag] =
            exports.cloneableTags[exports.float32Tag] = exports.cloneableTags[exports.float64Tag] =
                exports.cloneableTags[exports.int8Tag] = exports.cloneableTags[exports.int16Tag] =
                    exports.cloneableTags[exports.int32Tag] = exports.cloneableTags[exports.mapTag] =
                        exports.cloneableTags[exports.numberTag] = exports.cloneableTags[exports.objectTag] =
                            exports.cloneableTags[exports.regexpTag] = exports.cloneableTags[exports.setTag] =
                                exports.cloneableTags[exports.stringTag] = exports.cloneableTags[exports.symbolTag] =
                                    exports.cloneableTags[exports.uint8Tag] = exports.cloneableTags[exports.uint8ClampedTag] =
                                        exports.cloneableTags[exports.uint16Tag] = exports.cloneableTags[exports.uint32Tag] = true;
exports.cloneableTags[exports.errorTag] = exports.cloneableTags[exports.funcTag] =
    exports.cloneableTags[exports.weakMapTag] = false;
/** Used to map Latin Unicode letters to basic Latin letters. */
exports.deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C', '\xe7': 'c',
    '\xd0': 'D', '\xf0': 'd',
    '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N', '\xf1': 'n',
    '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J', '\u0135': 'j',
    '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't', '\u0165': 't', '\u0167': 't',
    '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W', '\u0175': 'w',
    '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
};
/** Used to map characters to HTML entities. */
exports.htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
};
/** Used to map HTML entities to characters. */
exports.htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
};
/** Used to escape characters for inclusion in compiled string literals. */
exports.stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
};
/** Built-in method references without a dependency on `root`. */
exports.freeParseFloat = parseFloat, exports.freeParseInt = parseInt;
/** Detect free variable `global` from Node. */
exports.freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */
exports.freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */
exports.root = exports.freeGlobal || exports.freeSelf || Function('return this')();
/** Detect free variable `exports`. */
exports.freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */
exports.freeModule = exports.freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */
exports.moduleExports = exports.freeModule && exports.freeModule.exports === exports.freeExports;
/** Detect free variable `process` from Node. */
exports.freeProcess = exports.moduleExports && exports.freeGlobal.process;
/** Used to access faster Node helpers. */
exports.nodeUtil = (function () {
    try {
        // Use `util.types` for Node 10+.
        var types = exports.freeModule && exports.freeModule.require && exports.freeModule.require('util').types;
        if (types) {
            return types;
        }
        // Legacy `process.binding('util')` for Node < 10.
        return exports.freeProcess && exports.freeProcess.binding && exports.freeProcess.binding('util');
    }
    catch (e) { }
}());
/* Node helper references. */
exports.nodeIsArrayBuffer = exports.nodeUtil && exports.nodeUtil.isArrayBuffer, exports.nodeIsDate = exports.nodeUtil && exports.nodeUtil.isDate, exports.nodeIsMap = exports.nodeUtil && exports.nodeUtil.isMap, exports.nodeIsRegExp = exports.nodeUtil && exports.nodeUtil.isRegExp, exports.nodeIsSet = exports.nodeUtil && exports.nodeUtil.isSet, exports.nodeIsTypedArray = exports.nodeUtil && exports.nodeUtil.isTypedArray;
/** Used for built-in method references. */
exports.arrayProto = Array.prototype, exports.funcProto = Function.prototype, exports.objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */
exports.funcToString = exports.funcProto.toString;
/** Used to check objects for own properties. */
exports.hasOwnProperty = exports.objectProto.hasOwnProperty;
/** Used to generate unique IDs. */
exports.idCounter = 0;
/** Used to detect methods masquerading as native. */
exports.maskSrcKey = '';
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
exports.nativeObjectToString = exports.objectProto.toString;
/** Used to infer the `Object` constructor. */
exports.objectCtorString = exports.funcToString.call(Object);
/** Built-in value references. */
exports.allocUnsafe = typeof Buffer == 'object' ? Buffer.allocUnsafe : undefined, exports.getPrototype = (0, overArg_1.default)(Object.getPrototypeOf, Object), exports.objectCreate = Object.create, exports.propertyIsEnumerable = exports.objectProto.propertyIsEnumerable, exports.splice = exports.arrayProto.splice, exports.spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, exports.symIterator = Symbol ? Symbol.iterator : undefined, exports.symToStringTag = Symbol ? Symbol.toStringTag : undefined;
exports.defineProperty = Object.defineProperty;
/** Mocked built-ins. */
exports.ctxClearTimeout = clearTimeout;
exports.ctxNow = Date.now;
exports.ctxSetTimeout = setTimeout;
/* Built-in method references for those with the same name as other `lodash` methods. */
exports.nativeCeil = Math.ceil, exports.nativeFloor = Math.floor, exports.nativeGetSymbols = Object.getOwnPropertySymbols, exports.nativeIsBuffer = typeof Buffer == 'object' ? Buffer.isBuffer : undefined, exports.nativeIsFinite = isFinite, exports.nativeJoin = exports.arrayProto.join, exports.nativeKeys = (0, overArg_1.default)(Object.keys, Object), exports.nativeMax = Math.max, exports.nativeMin = Math.min, exports.nativeNow = Date.now, exports.nativeParseInt = parseInt, exports.nativeRandom = Math.random, exports.nativeReverse = exports.arrayProto.reverse;
/* Built-in method references that are verified to be native. */
exports.nativeCreate = Object.create;
/** Used to store function metadata. */
exports.metaMap = WeakMap && new WeakMap;
/** Used to lookup unminified function names. */
exports.realNames = {};
/** Used to detect maps, sets, and weakmaps. */
exports.dataViewCtorString = (0, toSource_1.default)(DataView), exports.mapCtorString = (0, toSource_1.default)(Map), exports.promiseCtorString = (0, toSource_1.default)(Promise), exports.setCtorString = (0, toSource_1.default)(Set), exports.weakMapCtorString = (0, toSource_1.default)(WeakMap);
/** Used to convert symbols to primitives and strings. */
exports.symbolProto = Symbol ? Symbol.prototype : undefined, exports.symbolValueOf = exports.symbolProto ? exports.symbolProto.valueOf : undefined, exports.symbolToString = exports.symbolProto ? exports.symbolProto.toString : undefined;
